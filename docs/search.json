[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "QGIS Plugin 開発",
    "section": "",
    "text": "このサイトでは、QGIS の Plugin を開発するための情報を提供しています。\n\nhttps://docs.qgis.org/3.34/ja/docs/pyqgis_developer_cookbook/plugins/index.html\nGIS実習オープン教材\n\nhttps://gis-oer.github.io/gitbook/book/materials/python/10/10.html\nhttps://gis-oer.github.io/gitbook/book/materials/python/11/11.html\n\n\nQGIS プラグイン開発には、Python プログラミングの知識、テキストエディタとターミナルでの作業能力が必要です。\n本サイトでは、テキストエディタや Python 統合開発環境で Python プログラミングができる方を対象としています。\nPython プログラミングについては、詳しくは解説しません。\n一方で、QGIS 固有の Python 環境及び PyQt について解説します。"
  },
  {
    "objectID": "about.html#はじめに",
    "href": "about.html#はじめに",
    "title": "2  はじめに",
    "section": "2.1 はじめに",
    "text": "2.1 はじめに\nこのサイトは、"
  },
  {
    "objectID": "about.html#参考",
    "href": "about.html#参考",
    "title": "2  はじめに",
    "section": "2.2 参考",
    "text": "2.2 参考\n\nhttps://docs.qgis.org/3.34/ja/docs/pyqgis_developer_cookbook/plugins/index.html\nGIS実習オープン教材\n\nhttps://gis-oer.github.io/gitbook/book/materials/python/10/10.html\nhttps://gis-oer.github.io/gitbook/book/materials/python/11/11.html"
  },
  {
    "objectID": "about.html#ライセンス",
    "href": "about.html#ライセンス",
    "title": "2  はじめに",
    "section": "2.3 ライセンス",
    "text": "2.3 ライセンス\nLicense: CC BY SA"
  },
  {
    "objectID": "about.html#著者について",
    "href": "about.html#著者について",
    "title": "2  はじめに",
    "section": "2.4 著者について",
    "text": "2.4 著者について\nAuthor: Yoshihiko Bbaa\nhttps://orcid.org/0000-0001-7034-9724\nhttps://plugins.qgis.org/plugins/author/Yoshihiko%2520Baba/\nhttps://github.com/babayoshihiko"
  },
  {
    "objectID": "flow.html#必須",
    "href": "flow.html#必須",
    "title": "3  一連の流れ",
    "section": "3.1 必須",
    "text": "3.1 必須\nQGIS には、プラグイン開発に必要なスクリプト等が全て含まれていますが、なぜかそのままでは使えない形式になっています。\nまた、GUI などのフレームワークには PyQt を使っています。Python で Qt を使うには、PySide というものもあります。インターネットで検索すると、PySide の情報の場合もあるので、確認するようにしましょう。\n\n\n\n\n\n\n\n\n\nアプリ\nmacOS\nWin\nOSGeo4W\n\n\n\n\nQGIS plugin\n/Users/username/Library/Application Support/QGIS/QGIS3/profiles/default/python/plugins\n右に同じ\nC:\\Users\\username\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\default\\python\n\n\npython\n/Applications/QGIS-LTR.app/Contents/MacOS/bin/python3\nC:\\Program Files\\apps\\Python39\\python3.exe\nC:\\OSGeo4W\\apps\\Python312\\python3.exe\n\n\npyrcc\n/Applications/QGIS-LTR.app/Contents/MacOS/bin/pyrcc5\nC:\\Program Files\\apps\\Python312\\Scripts\\pyrcc5.exe\nC:\\OSGeo4W\\apps\\Python39\\Scripts\\pyrcc5.exe\n\n\npylupdate\n/Applications/QGIS-LTR.app/Contents/MacOS/bin/pylupdate5\nC:\\Program Files\\apps\\Python312\\Scripts\\pylupdate5.exe\nC:\\OSGeo4W\\apps\\Python39\\Scripts\\pylupdate5.exe\n\n\nDesigner\n/Applications/QGIS-LTR.app/Contents/MacOS/Designer.app\nC:\\Program Files\\apps\\Qt5\\bin\\designer.exe\nC:\\OSGeo4W\\apps\\Qt5\\bin\\designer.exe\n\n\nLinguist\n/Applications/QGIS-LTR.app/Contents/Resources/python/site-packages/qt5_applications/Qt/bin/Linguist.app\nC:\\Program Files\\apps\\Qt5\\bin\\linguist.exe\nC:\\OSGeo4W\\apps\\Qt5\\bin\\linguist.exe\n\n\n\nQGIS plugin の保存場所は、上記のところでない場合、QGIS の\n設定 > ユーザープロファイル > アクティブなプロファイルフォルダを開く\nから確認することができます。\n\n3.1.1 バージョンについて\nmacOS でも Windows でも、複数のバージョンの QGISをインストールすることが可能です。\nこの場合、注意点があります。\nQGIS バージョンごとに、Python もインストールされます。\n追加 Python モジュール等も、QGIS バージョンごとにバラバラに追加されます。\nQGIS プラグインは、複数のバージョンの QGIS が共通して同じソースを読み込みます。\n\n\n3.1.2 macOS\nLinguist と Designer はそのまま使うことができますが、pyrcc と pylupdate はそのままでは使うことができません。\nQGIS のバージョンによって、両者のファイルの中身が少し異なりますが、どちらもテキストファイルです。\n/Applications/QGIS-LTR.app/Contents/MacOS/bin/pyrcc5 が、以下のような場合\n#!/Applications/QGIS-LTR.app/Contents/MacOS/QGIS\n# -*- coding: utf-8 -*-\nimport re\nimport sys\nfrom PyQt5.pyrcc_main import main\nif __name__ == '__main__':\n    sys.argv[0] = re.sub(r'(-script\\.pyw|\\.exe)?$', '', sys.argv[0])\n    sys.exit(main())\n第一行目を\n#!/Applications/QGIS-LTR.app/Contents/MacOS/bin/python3\nと書き換えます。\n上記のようではなく、/Applications/QGIS-LTR.app/Contents/MacOS/bin/pyrcc5 が\n#!/bin/sh\nexec '`dirname $0`/python3.9' -m PyQt5.pyrcc_main ${1+\"$@\"}\nであれば、\n#!/bin/sh\nexec '/Applications/QGIS-LTR.app/Contents/MacOS/bin/python3.9' -m PyQt5.pyrcc_main ${1+\"$@\"}\n/Applications/QGIS-LTR.app/Contents/MacOS/bin/pylupdate5 は\n#!/Applications/QGIS-LTR.app/Contents/MacOS/QGIS\n# -*- coding: utf-8 -*-\nimport re\nimport sys\nfrom PyQt5.pylupdate_main import main\nif __name__ == '__main__':\n    sys.argv[0] = re.sub(r'(-script\\.pyw|\\.exe)?$', '', sys.argv[0])\n    sys.exit(main())\nまたは\n#!/bin/sh\nexec '/Applications/QGIS-LTR.app/Contents/MacOS/bin/python3.9' -m PyQt5.pylupdate_main ${1+\"$@\"}\nと書き換えます。\n\n\n3.1.3 Windows\nWindows では、linguist.exe と designer.exe、pyrcc.exe と pylupdate.exe はそのままでは使うことができません。\npyrcc.exe と pylupdate.exe を使う直前に qt5 や python3 の環境を読み込ませることで解決できます。\nスタンドアロン版の場合\n> call C:\\Program Files\\QGIS 3.38.2\\bin\\o4w_env.bat\n> cd C:\\Users\\username\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\python\\plugins\\MyPlugin\n> C:\\Program Files\\QGIS 3.38.2\\apps\\Python312\\Scripts\\pyrcc5.exe -o resources.py resources.qrc\nOSGeo4W 版の場合\n> call C:\\OSGeo4W\\bin\\o4w_env.bat\n> cd C:\\Users\\username\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\python\\plugins\\MyPlugin\n> C:\\OSGeo4W\\apps\\Python39\\Scripts\\pyrcc5.exe -o resources.py resources.qrc\nなお、PowerShell の場合、call を無くします。\nPS C:\\Users\\username> cd C:\\OSGeo4W\\bin\\\nPS C:\\OSGeo4W\\bin> ./o4w_env.bat\nPS C:\\Users\\username> cd C:\\Users\\username\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\python\\plugins\\MyPlugin\nPS C:\\Users\\username\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\python\\plugins\\MyPlugin> C:\\OSGeo4W\\apps\\Python39\\Scripts\\pyrcc5.exe -o resources.py resources.qrc\nlinguist.exe と designer.exe は、そのままでは実行できません。C:\\OSGeo4W\\saga_gui.bat などを参考に、以下のファイルを作成します。\n\nC:\\OSGeo4W\\saga_gui.bat をコピーする\nC:\\OSGeo4W\\linguist_gui.bat という名前にする\nメモ帳で開き、二行目の ¥apps¥saga¥saga_gui.exe を ¥Qt5¥bin¥linguist.exe と書き換える\n\n同様の作業を designer についても行います。\nこれで、C:\\OSGeo4W\\linguist_gui.bat をダブルクリックすると Designer が立ち上がるようになります。"
  },
  {
    "objectID": "flow.html#流れ",
    "href": "flow.html#流れ",
    "title": "3  一連の流れ",
    "section": "3.2 流れ",
    "text": "3.2 流れ\n\n課題の発見: まずは、QGIS や各種 Plugin を試してみることです。その中で、課題を発見していきます。\n設計: どのような機能を実装したいか、どのような UI にしたいかを設計します。前半は紙に自由に書くと良いでしょう。とくに、Plugin では、UI として３つの方法が主流です。\n\nウィンドウ\nドック\nプロセシング\n\n雛形作成: Plugin Builder を使って、名称などを含んだ雛形を作ります\nresouces.py の作成: pyrcc を使います\nGitHub 登録: 必須ではありませんが、GitHub で公開することができます\nGitHub の DOI 登録\nコード記述\nGitHub にコミット\n多言語化"
  },
  {
    "objectID": "flow.html#雛形作成",
    "href": "flow.html#雛形作成",
    "title": "3  一連の流れ",
    "section": "3.3 雛形作成",
    "text": "3.3 雛形作成\nQGIS のプラグイン Plugin Builder 3 を使用します。\nバージョンのところでは、0.0.1 という表記ができません。0.1 などにして、すぐに metadata.txt を書き換えることで対応できます。\n保存先は、以下の QGIS plugin 保存先にしておくと、QGIS を立ち上げた際に読み込まれます。ただし、次の節で見るように、resouces.py が作成されていないとプラグインとして認識されません。\nmacOS: /Users/username/Library/Application Support/QGIS/QGIS3/profiles/default/python/plugins\nWindows: C:\\Users\\username\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\default\\python"
  },
  {
    "objectID": "flow.html#resouces.py-の作成",
    "href": "flow.html#resouces.py-の作成",
    "title": "3  一連の流れ",
    "section": "3.4 resouces.py の作成",
    "text": "3.4 resouces.py の作成\nMyPlugin 内に、resouces.py ファイルが作成されないことがあります。これがないと、プラグインとして認識されません。(Windows で o4w_env.bat を読み込んだ後などだと、パスが通っているので resouces.py まで作成してくれます。)\nresources.qrc があることを確認します。\nmacOS の場合\n/Applications/QGIS-LTR.app/Contents/MacOS/bin/pyrcc5 -o resources.py resources.qrc\nWindows スタンドアロン版の場合\n> call C:\\Program Files\\QGIS 3.38.2\\bin\\o4w_env.bat\n> C:\\Program Files\\apps\\Python312\\Scripts\\pyrcc5.exe -o resources.py resources.qrc\nOSGeo4W 版の場合\n> call C:\\OSGeo4W\\bin\\o4w_env.bat\n> C:\\OSGeo4W\\apps\\Python39\\Scripts\\pyrcc5.exe -o resources.py resources.qrc\nなお、PowerShell の場合、call をなしで実行します。\nPS > cd C:\\OSGeo4W\\bin\\\nPS C:\\OSGeo4W\\bin\\> .\\o4w_env.bat\nPS C:\\OSGeo4W\\bin\\> C:\\OSGeo4W\\apps\\Python39\\Scripts\\pyrcc5.exe -o resources.py resources.qrc\nこれで QGIS Plugin としては完成です。\nQGIS を立ち上げて、プラグイン > プラグインの管理とインストール から確認してみましょう。\n\n3.4.1 Processing\nPlugin Builder は、Processing の場合、resources.qrc を作成してくれません。このため、自分で作成しましょう。\n<RCC>\n    <qresource prefix=\"/plugins/MyPlugin\" >\n        <file>icon.png</file>\n    </qresource>\n</RCC>\nまた、icon.png も必要になります。こちらも作成するか、他のプラグインからコピーしましょう。\nここまで準備して、pyrcc を実行します。"
  },
  {
    "objectID": "designer.html#designer",
    "href": "designer.html#designer",
    "title": "4  デザイン",
    "section": "4.1 Designer",
    "text": "4.1 Designer\nQGIS のフォルダ内には、Designer というアプリケーションが入っています。\nWindows の場合、Section 3.1.3 であらかじめ作っておいた designer_gui.bat をダブルクリックします。\nWindows OSGeo4W: C:\\OSGeo4W\\bin\\designer_gui.bat\nmacOS: /Applications/QGIS-LTR.app/Contents/MacOS/Designer.app"
  },
  {
    "objectID": "designer.html#よく使う-widget",
    "href": "designer.html#よく使う-widget",
    "title": "4  デザイン",
    "section": "4.2 よく使う Widget",
    "text": "4.2 よく使う Widget\nGUI を設計する際には、Widget という言葉をよく使います。Widget とは、ボタンやテキスト入力などのパーツのことです。\n\n4.2.1 LineEdit と TextEdit\nテキスト入力フォームには、以下のように三種類あります。\nlineEdit: 一行だけのシンプルなテキスト入力\n\n\n\nQLineEdit\n\n\ntextEdit: 複数行で、太字なども可能\nplainTextEdit: 複数行で、太字などのないシンプルなテキスト入力\nQLineEdit についての参照 (バージョン６のものになります)。\nhttps://www.riverbankcomputing.com/static/Docs/PyQt6/api/qtwidgets/qlineedit.html\n\n\n4.2.2 Label\nLabel は、LineEdit などと異なり、ユーザが入力するのではないテキストです。\n\n\n4.2.3 ListWidget\nList は、１列複数行で表示する表です。ListView と ListWidget がありますが、ListWidget の方が簡単に扱うことができます。\n\n\n\nQListWidget\n\n\nListWidget は、複数のテキストを縦に並べて表示をし、一つを選択するように使います。ComboBox と異なる点としては、選択肢を表示する視認性と、複数選択が可能になります。\nDesigner では、List Widget を、ウィンドウにドラッグして配置します。この際、objectName を myListWidget_1 などに設定します。この objectName は、 Python の中でも使います。ノートなどにメモしておきましょう。\nList Widget のあるウィンドウが選択された状態で右クリック (macOS だとダブルタップや Cmd + クリック) をし、Layout が Lay Out in a Grid などになっていると、ウィンドウの大きさを変えた際に自動的に伸び縮みします。\n各列は item と呼ばれます。Python で item を追加するには、MyPlugin.py の def run(self): を\n\n    def run(self):\n        ....\n        self.dlg.myListWidget_1.addItem('日本')\n        self.dlg.myListWidget_1.addItem('イギリス')\n\n注: Dialogue でなく Dock の場合、dlg を dockwidget に変えて、self.dockwidget.myListWidget_1.addItem('日本') とします。以下も同様です。\nデフォルトでは、１列ずつしか選択することができません。以下のコードで、複数行選択が可能になります。\n\nfrom qgis.PyQt.QtWidgets import QAbstractItemView\n\n...\n\n    def run(self):\n        ....\n        self.myListWidget_1.setSelectionMode(\n            QAbstractItemView.ExtendedSelection\n        )\n\nQListWidget についての参照 (バージョン６のものになります)。\nhttps://www.riverbankcomputing.com/static/Docs/PyQt6/api/qtwidgets/qlistwidget.html\n\n\n4.2.4 ボタン\nボタンは、QPushButton と言います。\n\n\n\nQPushButton\n\n\n「押された時の処理」の書き方を学んでいきましょう。\nまず、Designer では Pushu Button をウィンドウにドラッグし、obectName を myPushButton_1 などのように設定します。\nMyPlugin.py に、以下のようなコードを追加します。\n\n...\n\n    def run(self):\n        ....\n        self.dlg.myPushButton_1.clicked.connect(self.ChangeButtonLabel)\n\nさらに、ChangeButtonLabel() というメソッドを、同じファイルの地番下に追加します。\n\n...\n    def ChangeButtonLabel(self):\n        self.dlg.myPushButton_1.setText('押された')\n\nこれで、ボタンを押されると、ボタンが「押された」と表示されます。\nhttps://www.riverbankcomputing.com/static/Docs/PyQt6/api/qtwidgets/qpushbutton.html"
  },
  {
    "objectID": "designer.html#レイアウト",
    "href": "designer.html#レイアウト",
    "title": "4  デザイン",
    "section": "4.3 レイアウト",
    "text": "4.3 レイアウト\nデフォルトでは、ユーザがウィンドウを大きくしても、LineEdit などはその大きさに合わせて伸びてくれません。\n多くの場合は、Layouts の Vertical Layout と Horizontal Layout を組み合わせてレイアウトを完成させます。\n最後に、ウィンドウ全体を選択した状態で右クリックします。コンテキストメニューの一番下、Lay out > Lay Out in a Grid を選択します。\n\n4.3.1 上寄せ\nウィンドウのサイズが変わっても、LineEdit などを中央にせずに上寄せのままにしたい場合、Vertical Spacer を使います。\n\n\n4.3.2 可変 splitter\nListWidget などを並べて、幅を可変にするには、Lay Out Horizontally in Splitter を使います。この Widget はデフォルトでは使えないグレーアウトの状態です。並べたい二つの ListWidget を選択した状態で、このボタンが有効になります。"
  },
  {
    "objectID": "designer.html#モーダル",
    "href": "designer.html#モーダル",
    "title": "4  デザイン",
    "section": "4.4 モーダル",
    "text": "4.4 モーダル\nQGIS のプラグインウィンドウは、メインウィンドウに隠れることがあります。\nメインウィンドウよりも常に上にあるウィンドウをモーダルウィンドウと言います。\nQGIS プラグインの場合\n\ndef run(self):\n    ...\n    self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)\n\nとします。"
  },
  {
    "objectID": "designer.html#子ウィンドウ",
    "href": "designer.html#子ウィンドウ",
    "title": "4  デザイン",
    "section": "4.5 子ウィンドウ",
    "text": "4.5 子ウィンドウ\nDesigner を使い、MyPlugin_2.ui を作成します。\nテキストエディタで、MyPlugin_2.py を作成します。\n\n\\# -*- coding: utf-8 -*-\n\nfrom qgis.PyQt import QtGui, QtWidgets, uic\nimport os\n\nFORM_CLASS, _ = uic.loadUiType(os.path.join(\n    os.path.dirname(__file__), 'MyPlugin_2.ui'))\n\nclass MyPlugin_2 (QtWidgets.QDialog, FORM_CLASS):\n    def __init__(self, parent = None):\n        \"\"\"Constructor.\"\"\"\n        super(MyPlugin_2, self).__init__(parent)\n        self.setupUi(self)\n\nMyPlugin.py も編集します。\n\nclass MyPlugin:\n    \"\"\"QGIS Plugin Implementation.\"\"\"\n\n    def __init__(self, iface):\n        ...\n        self.MyPlugin_2 = MyPlugin_2()\n\nこの後、子ウィンドウを登場させたいところに、self.MyPlugin_2.show() をすることで、ウィンドウが登場します。\nまた、子ウィンドウをモーダルにしたい場合は、前の節をご参照ください。"
  },
  {
    "objectID": "python.html#sec-python-folder",
    "href": "python.html#sec-python-folder",
    "title": "5  Python 環境",
    "section": "5.1 Python の位置",
    "text": "5.1 Python の位置\n\nWindows スタンドアロン C:\\Program Files\\QGIS 3.38.2\\apps\\Python39\\python3.exe\nWindows OSGeo4W C:\\OSGeo4W\\bin\\python3 または C:\\OSGeo4W\\apps\\Python312\\python3.exe\nmacOS: /Applications/QGIS-LTR.app/Contents/MacOS/bin/python3"
  },
  {
    "objectID": "python.html#モジュールの位置",
    "href": "python.html#モジュールの位置",
    "title": "5  Python 環境",
    "section": "5.2 モジュールの位置",
    "text": "5.2 モジュールの位置\n\nWindows スタンドアロン C:\\Program Files\\QGIS 3.38.2\\apps\\Python39\\Lib\\site-packages\nWindows OSGeo4W C:\\OSGeo4W\\bin\\python3 または C:\\OSGeo4W\\apps\\Python312\\Lib\\site-packages\nmacOS: /Applications/QGIS-LTR.app/Contents/Resources/python/site-packages/\n\nPython の解説書や解説サイトはたくさんありますが、自分の使っている Python がどれなのかを間違えると、機能しなくなります。\nターミナルで使っている Python が、システムでインストールしたPython であれば、そこのモジュールを追加しても QGIS プラグインでは使うことはできません。\nQGIS の Python でモジュールを追加するには、python_module_manager という QGIS プラグインを使うと良いでしょう。"
  },
  {
    "objectID": "python.html#myplugin.py",
    "href": "python.html#myplugin.py",
    "title": "5  Python 環境",
    "section": "5.3 MyPlugin.py",
    "text": "5.3 MyPlugin.py\nプラグイン名を MyPlugin としたとすると、フォルダ内に MyPlugin.py という Python スクリプトができていると思います。\nここに処理を追加していくことでプラグインの機能が出来上がっていきます。"
  },
  {
    "objectID": "python.html#ファイル管理",
    "href": "python.html#ファイル管理",
    "title": "5  Python 環境",
    "section": "5.4 ファイル管理",
    "text": "5.4 ファイル管理\nよく使う関数 (例: getValue()) などを、MyPlugin.py から独立したファイル (例: Utils.py) に保存するときがあります。\nこの場合、MyPlugin.py の冒頭に\n\nfrom . import Utils\n\n...\n\n\nUtils.getValue()\n\nと記述することで、Utils 内の関数などが使えるようになります。"
  },
  {
    "objectID": "pyqt.html",
    "href": "pyqt.html",
    "title": "6  PyQt",
    "section": "",
    "text": "Qt (キュート) は、Linux, macOS, Windows などでアプリケーション開発を行う開発フレームワークです。\nプログラミング言語としては、C++ 言語向けとなっています。C++ 向けのレファレンスは、以下の通り。\nhttps://doc.qt.io/qt-6/reference-overview.html\nQt は、Python にも拡張されています。ただし、Python サポートは、二種類あります。イギリスの Riverbank Computing 社が開発した PyQt と、Qt Company が開発した PySide です。PySide は Qt for Python とも言います。\nQGIS が使用しているのは、PyQt です。検索すると PySide が引っかかることが多いので、要注意です。"
  },
  {
    "objectID": "editor.html",
    "href": "editor.html",
    "title": "7  開発環境",
    "section": "",
    "text": "Python のソースコードを書くには、テキストエディタまたは統合開発環境があると便利です。\nQGIS の Python コンソールにも、Python ソースを書くためのエディタがあります。\n\n\n\nQGIS Python"
  },
  {
    "objectID": "m18n.html#流れ",
    "href": "m18n.html#流れ",
    "title": "8  多言語化",
    "section": "8.1 流れ",
    "text": "8.1 流れ\n\n*.ui ファイルと MyPlugin.py などにメッセージを self.tr(‘Sample text’) などと記述\npylupdate で、Python スクリプト内の翻訳すべき言語を抽出 (MyPlugin.pro を作成)\nLinguist で MyPlugin_ja.ts ファイルを編集しリリース (MyPlugin_ja.ts が作成される)"
  },
  {
    "objectID": "m18n.html#sec-m18n-folder",
    "href": "m18n.html#sec-m18n-folder",
    "title": "8  多言語化",
    "section": "8.2 多言語化のフォルダ",
    "text": "8.2 多言語化のフォルダ\nMyPlugin フォルダ内に、i18n というフォルダがあります。\ni18n フォルダ内には、af.ts というファイルがありますが、これはサンプルです。実際には不要なので、削除しましょう。"
  },
  {
    "objectID": "m18n.html#pro-ファイルを作る",
    "href": "m18n.html#pro-ファイルを作る",
    "title": "8  多言語化",
    "section": "8.3 .pro ファイルを作る",
    "text": "8.3 .pro ファイルを作る\nテキストエディタで、i18n フォルダ内に MyPlugin.pro というファイル名でファイルを作成します。\n中身は以下の通りです。適宜、自分のファイル名に合わせてください。\nFORMS = ../MyPlugin_dialog_base.ui\nSOURCES = ../MyPlugin_dialog.py ../MyPlugin.py ../MyPluginUtils.py\nTRANSLATIONS =  MyPlugin_ja.ts\nまた、Window から Dock に変えるなど、上記の中身に大きな変更が発生した場合も、.pro ファイルを作り直す必要があります。"
  },
  {
    "objectID": "m18n.html#ts-ファイルを作る",
    "href": "m18n.html#ts-ファイルを作る",
    "title": "8  多言語化",
    "section": "8.4 .ts ファイルを作る",
    "text": "8.4 .ts ファイルを作る\n次に、MyPlugin_ja.ts ファイルを作ります。これには、pylupdate という Python スクリプトが必要です。\n場所がわからない場合は、Section 5.1 を参照。\nmacOS: /Applications/QGIS-LTR.app/Contents/MacOS/bin/pylupdate5\nWindows の場合はコンソールなどで以下のように入力します。\nmacOS の QGIS は、/Applications/QGIS-LTR.app/Contents/MacOS/bin/pylupdate5 が入っていますが、そのままでは使うことができません。一行目を以下のように書き換えましょう。\n#!/Applications/QGIS-LTR.app/Contents/MacOS/QGIS\nを\n#!/Applications/QGIS-LTR.app/Contents/MacOS/bin/python3\nと書き換えます。\n#| eval: false\ncd /path/to/MyPlugin\n/Applications/QGIS-LTR.app/Contents/MacOS/bin/pylupdate5 -noobsolete i18n/jpdata.pro\nこれで、i18n フォルダ内に MyPlugin_ja.ts が作成されます。すでにある場合は、更新されます。"
  },
  {
    "objectID": "m18n.html#linguist",
    "href": "m18n.html#linguist",
    "title": "8  多言語化",
    "section": "8.5 Linguist",
    "text": "8.5 Linguist\ni18n フォルダ内の MyPlugin_ja.ts ファイルを、Linguist で開きます。\nmacOS: /Applications/QGIS-LTR.app/Contents/Resources/python/site-packages/qt5_applications/Qt/bin/Linguist.app\nWindows OSGeo4W インストールの場合\n#| eval: false\nC:\\OSGeo4W\\bin\\python3\nmacOS の場合 (QGIS-LTR.app は、名前が異なる場合があります。)\n#| eval: false\nopen /Applications/QGIS-LTR.app/Contents/Resources/python/site-packages/qt5_applications/Qt/bin/Linguist.app"
  },
  {
    "objectID": "git.html#github",
    "href": "git.html#github",
    "title": "9  Git",
    "section": "9.1 GitHub",
    "text": "9.1 GitHub\nGit はソース管理ツールで、GitHub が最もよく使われているリポジトリです。\nGitHub アカウントはすでに持っていることが前提です。\nGitHub でソースを管理する場合は、以下の手順が良いでしょう。\n\nGitHub 上で MyPlugin リポジトリを作成\nローカル PC でクローン作成\n開発した MyPlugin のファイルをコピー\nファイルを add\nファイルを commit\nファイルを push\n\nこれで、"
  },
  {
    "objectID": "git.html#ラインセンス",
    "href": "git.html#ラインセンス",
    "title": "9  Git",
    "section": "9.2 ラインセンス",
    "text": "9.2 ラインセンス\nGitHub で公開するにあたり、ソースコードのライセンスを決めましょう。\n公開される QGIS プラグインは、GPL バージョン 2 以降のライセンスである必要があります。\nhttps://blog.qgis.org/2016/05/29/licensing-requirements-for-qgis-plugins/"
  },
  {
    "objectID": "git.html#ソースコードに-doi-を付与",
    "href": "git.html#ソースコードに-doi-を付与",
    "title": "9  Git",
    "section": "9.3 ソースコードに DOI を付与",
    "text": "9.3 ソースコードに DOI を付与\nDigital Object Identifier (DOI) は、インターネット上の著作物のユニークな ID です。\n作ったプラグイン（プログラミング）の成果を、"
  },
  {
    "objectID": "publish.html#osgeo-アカウント",
    "href": "publish.html#osgeo-アカウント",
    "title": "10  公開",
    "section": "10.1 OSGeo アカウント",
    "text": "10.1 OSGeo アカウント\nOSGeo アカウントを作成します。\nhttps://www.osgeo.org/"
  },
  {
    "objectID": "publish.html#公開",
    "href": "publish.html#公開",
    "title": "10  公開",
    "section": "10.2 公開",
    "text": "10.2 公開\nQGIS Plugin サイトにログイン後、追加します。\nhttps://plugins.qgis.org/"
  }
]